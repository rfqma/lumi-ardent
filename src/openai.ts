import { OpenAI } from "openai";
import "dotenv/config";
import CONSTANTS from "./constants";
import UTILS from "./utils";

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY as string,
});

const generatePrompt = async () => {
  const baseCharacter = `A cyberpunk angel with long, flowing silver-blue hair streaked with glowing neon highlights. 
  She wears a high-tech visor that emits a soft, futuristic glow over her intense, otherworldly eyes. 
  Her sleek neon-lit jacket shimmers in the dim light of the cityscape around her.`;

  const variations = [
    "She is standing on a high-rise rooftop, gazing at the sprawling neon city below.",
    "She is walking through a rainy cyberpunk street, with neon reflections shimmering on the wet pavement.",
    "She is sitting in a futuristic caf√©, interacting with a holographic interface.",
    "She is mid-air, floating with angelic cyber wings, overlooking the glowing metropolis.",
    "She is riding a sleek cyber-bike through the city, lights streaking past her.",
  ];

  const randomScene = variations[Math.floor(Math.random() * variations.length)];

  const finalPrompt = `character:${baseCharacter}\n\n scene:${randomScene}\n\n The mood is cinematic, ultra-realistic, and visually stunning.`;

  const availableTokens = UTILS.calculateAvailableTokens({
    promptLength: finalPrompt.length,
    maxModelTokens: CONSTANTS.MAX_TOKENS,
  });

  try {
    const results = await openai.chat.completions.create({
      model: "chatgpt-4o-latest",
      // prompt: prompt,
      messages: [
        {
          role: "system",
          content: finalPrompt,
        },
        {
          role: "user",
          content: "Generate prompt.",
        },
      ],
      temperature: 1,
      max_tokens: Math.min(availableTokens, 1000),
      top_p: 1,
      frequency_penalty: 2,
      presence_penalty: 0.5,
    });

    return results.choices[0].message.content?.trim() ?? "no prompt generated.";
  } catch (error) {
    console.error("error generating prompt:", error);
    return "an error occurred while generating the prompt.";
  }
};

const generateCaption = async ({
  prompt,
}: {
  prompt: string;
}): Promise<string> => {
  const captionPrompt = `Generate a poetic, eerie Instagram caption for a cyberpunk angel of darkness. 
  The caption should feel mystical, haunting, and cyberpunk-themed, conveying both divine beauty 
  and an unsettling presence. avoid common cliches. Related to image generated by this prompt: ${prompt}.`;

  try {
    const results = await openai.chat.completions.create({
      model: "chatgpt-4o-latest",
      messages: [
        { role: "system", content: captionPrompt },
        { role: "user", content: "Generate a caption." },
      ],
      temperature: 0.5,
      max_tokens: 50,
      top_p: 1,
      frequency_penalty: 1.75,
      presence_penalty: 0.5,
    });

    return (
      results.choices[0].message.content?.trim() ?? "no caption generated."
    );
  } catch (error) {
    console.error("error generating caption:", error);
    return "an error occurred while generating the caption.";
  }
};

// const generateImage = async ({ prompt }: { prompt: string }) => {
//   try {
//     const results = await openai.images.generate({
//       model: "dall-e-3",
//       quality: "hd",
//       prompt: UTILS.truncatePrompt({
//         prompt: prompt,
//         maxLength: CONSTANTS.MAX_PROMPT_LENGTH,
//       }),
//       n: 1,
//       size: "1024x1024",
//     });

//     return results.data[0].url ?? "no image url generated.";
//   } catch (error) {
//     console.error("error generating image:", error);
//     return "an error occurred while generating the image.";
//   }
// };

const OPENAI = {
  generatePrompt,
  generateCaption,
  // generateImage,
};

export default OPENAI;
